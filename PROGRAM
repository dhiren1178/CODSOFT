import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the training dataset
train_file_path = '/content/archive_2.zip' # ENTER HERE UR FILE PATH
train_data = pd.read_csv(train_file_path)

# Data Preprocessing for the training set
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
train_data['Sex'] = train_data['Sex'].map({'male': 0, 'female': 1})
train_data = pd.get_dummies(train_data, columns=['Embarked'], drop_first=True)

# Select features and target variable
X_train = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_Q', 'Embarked_S']]
y_train = train_data['Survived']

# Split the training data into training and testing sets
X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Build a Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_split, y_train_split)

# Make predictions on the validation set
y_pred = model.predict(X_val)

# Evaluate the model
print(f'Accuracy: {accuracy_score(y_val, y_pred)}')
print(f'Confusion Matrix:\n{confusion_matrix(y_val, y_pred)}')
print(f'Classification Report:\n{classification_report(y_val, y_pred)}')

# Load the testing dataset
test_file_path = '/content/archive_2.zip' # ENTER HERE UR FILE PATH
test_data = pd.read_csv(test_file_path)

# Data Preprocessing for the testing set
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)
test_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True)
test_data['Sex'] = test_data['Sex'].map({'male': 0, 'female': 1})
test_data = pd.get_dummies(test_data, columns=['Embarked'], drop_first=True)

# Select features for prediction
X_test = test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_Q', 'Embarked_S']]

# Make predictions on the testing set
predictions = model.predict(X_test)

# Add the predictions to the test_data DataFrame
test_data['Predicted_Survived'] = predictions

# Display or save the results
print(test_data[['PassengerId', 'Predicted_Survived']])
