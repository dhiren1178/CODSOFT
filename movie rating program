import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Load the dataset with a different encoding
data = pd.read_csv("/content/IMDb Movies India.csv", encoding='ISO-8859-1')

# Feature engineering
# Assuming 'Name' column contains the movie names
data['Year'] = data['Name'].str.extract('(\d{4})').astype(float)
data['Num_Actors'] = data[['Actor 1', 'Actor 2', 'Actor 3']].count(axis=1)

# Extract numeric part from 'Duration' and convert to float
data['Duration'] = data['Duration'].str.extract('(\d+)').astype(float)

# Remove non-numeric characters and convert 'Votes' to numeric
data['Votes'] = data['Votes'].replace('[^\d.]', '', regex=True).astype(float)

# Drop rows with missing values in the target variable
data = data.dropna(subset=['Rating'])

# Define features and target variable
features = ['Year', 'Duration', 'Genre', 'Votes', 'Director', 'Num_Actors']
target = 'Rating'

# Split the data
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Define preprocessing steps
numeric_features = ['Year', 'Duration', 'Votes', 'Num_Actors']
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),  # Impute missing values with the mean
    ('scaler', StandardScaler())
])

categorical_features = ['Genre', 'Director']
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='constant', fill_value='unknown')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Define the regression model
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', RandomForestRegressor(random_state=42))])

# Train the model
model.fit(train_data[features], train_data[target])

# Make predictions
predictions = model.predict(test_data[features])

# Evaluate the model
mse = mean_squared_error(test_data[target], predictions)
rmse = mse**0.5

print(f"Root Mean Squared Error: {rmse}")

# ... (previous code)

# Train the model
model.fit(train_data[features], train_data[target])

# Make predictions on new data
new_data = pd.DataFrame({
    'Year': [2022],
    'Duration': [120],
    'Genre': ['Action'],
    'Votes': [1000],
    'Director': ['New Director'],
    'Num_Actors': [3]
})

# Use the trained model to make predictions
new_predictions = model.predict(new_data[features])

# Display the predictions
print("Predicted Ratings for New Data:")
print(new_predictions)

# Evaluate the model
mse = mean_squared_error(test_data[target], predictions)
rmse = mse**0.5

print(f"Root Mean Squared Error: {rmse}")

